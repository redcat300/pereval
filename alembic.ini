# A generic, single database configuration.

[alembic]
# path to migration scripts
# Use forward slashes (/) also on Windows to provide an OS-agnostic path
script_location = alembic

# Uncomment the line below if you want the files to be prepended with date and time
# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
prepend_sys_path = .

# timezone to use when rendering the date within the migration file
# leave blank for localtime
# timezone =

# version path separator; As mentioned above, this is the character used to split
version_path_separator = os

# the output encoding used when revision files
output_encoding = utf-8

# Setting up the SQLAlchemy URL for the database.
# The value will be dynamically set in env.py
sqlalchemy.url = postgresql://user:password@host:port/dbname

[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run on newly generated revision scripts.
# Uncomment to use post-write hooks like black or ruff for formatting/linting

# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# hooks = ruff
# ruff.type = exec
# ruff.executable = %(here)s/.venv/bin/ruff
# ruff.options = --fix REVISION_SCRIPT_FILENAME

# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARNING
handlers = console
qualname =

[logger_sqlalchemy]
level = WARNING
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
